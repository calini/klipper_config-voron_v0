######################################################################
# DisplayEncoder config
######################################################################

[mcu displayEncoder]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_160007000143535031303820-if00
restart_method: command

[display]
lcd_type: sh1106
i2c_mcu: displayEncoder
i2c_bus: i2c1a
encoder_pins: ^displayEncoder:PA3, ^displayEncoder:PA4
click_pin: ^!displayEncoder:PA1
kill_pin: ^!displayEncoder:PA5
#x_offset: 2 # Use X offset to shift the display towards the right. Value can be 0 to 3
vcomh: 31
#   Set the Vcomh value on SSD1306/SH1106 displays. This value is
#   associated with a "smearing" effect on some OLED displays. The
#   value may range from 0 to 63. Default is 0.
#   Adjust this value if you get some vertical stripes on your display. (31 seems to be a good value)

[neopixel displayStatus]
pin: displayEncoder:PA0
chain_count: 1
color_order: GRB
initial_RED: 0.0
initial_GREEN: 0.005
initial_BLUE: 0.005


######################################################################
# BME680 chamber sensor
######################################################################

[display_glyph chamber]
data:
  ................
  ................
  .**************.
  .*............*.
  .*...*....*...*.
  .*....*....*..*.
  .*...*....*...*.
  .*..*....*....*.
  .*...*....*...*.
  .*....*....*..*.
  .*...*....*...*.
  .*.**********.*.
  .*............*.
  .**************.
  ................
  ................

# Add glyph to main screen
[display_data _default_16x4 speed_factor]
position: 1, 10
text:
  ~chamber~
  { "%3.0f" % (printer["temperature_sensor env_sensor"].temperature,) }
  ~degrees~

######################################################################
# Custom Menus
######################################################################


######################################################################
# Pause/Resume commands
######################################################################

[menu __main __octoprint]
type: list
enable: {printer.pause_resume.is_paused or printer.idle_timeout.state == "Printing"}
name: Print


### PRINT ### 
[menu __main __octoprint __pause]
type: command
name: Pause printing
enable: {not printer.pause_resume.is_paused}
gcode:
    PAUSE

[menu __main __octoprint __resume]
type: command
name: Resume printing
enable: {printer.pause_resume.is_paused}
gcode:
    RESUME

[menu __main __octoprint __abort]
type: command
name: Abort printing
gcode:
    CANCEL_PRINT


######################################################################
# Nevermore Filter
######################################################################

[menu __main __filter]
type: list
name: Filter

[menu __main __filter __filteronoff]
type: input
enable: {'fan_generic filter' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed > 0.0}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_FAN_SPEED FAN=filter SPEED={0.5 if menu.input else 0}

[menu __main __filter __filterspeed]
type: input
enable: {'fan_generic filter' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    SET_FAN_SPEED FAN=filter SPEED={menu.input}


[menu __main __temp __ambienttemp]
index: 0
type: input
enable: {'fan_generic filter' in printer}
name: Amb:{' ON' if menu.input else 'OFF'} ({ "%4.0f" % printer["temperature_sensor env_sensor"].temperature})
input: {printer['fan_generic filter'].speed > 0.0}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_FAN_SPEED FAN=filter SPEED={0.5 if menu.input else 0}

######################################################################
# LEDSs
######################################################################

[menu __main __leds]
type: list
name: LEDs

[menu __main __leds __ledsonoff]
type: input
enable: {"output_pin lights" in printer}
name: LEDs: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin lights'].value > 0.0}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=lights VALUE={0.2 if menu.input else 0}

[menu __main __leds __ledscontrol]
type: input
enable: {"output_pin lights" in printer}
name: LEDs: {'%3d' % (menu.input*100)}%
input: {printer['output_pin lights'].value}
input_min: 0.0
input_max: 0.5
input_step: 0.02
gcode:
    SET_PIN PIN=lights VALUE={menu.input}

